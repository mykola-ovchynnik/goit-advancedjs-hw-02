{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\n\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst elements = {\n  input: document.querySelector('#datetime-picker'),\n  btnStart: document.querySelector('button[data-start]'),\n  days: document.querySelector('span[data-days]'),\n  hours: document.querySelector('span[data-hours]'),\n  minutes: document.querySelector('span[data-minutes]'),\n  seconds: document.querySelector('span[data-seconds]'),\n};\n\nelements.btnStart.disabled = true; // Disable button until correct date is selected\n\nlet selectedDate;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n\n  onClose(selectedDates) {\n    selectedDate = selectedDates[0];\n    if (selectedDate < new Date()) {\n      iziToast.error({\n        title: 'Error',\n        message: 'Please choose a date in the future',\n        position: 'topCenter',\n      });\n    } else {\n      elements.btnStart.disabled = false;\n    }\n  },\n};\n\nflatpickr(elements.input, options);\n\nfunction handlerCountdown() {\n  selectedDate = new Date(elements.input.value).getTime();\n\n  const interval = setInterval(() => {\n    const currentTime = new Date().getTime();\n    const timeDifference = selectedDate - currentTime;\n\n    if (timeDifference <= 0) {\n      clearInterval(interval);\n    } else {\n      const { days, hours, minutes, seconds } = convertMs(timeDifference);\n\n      elements.days.textContent = addLeadingZero(days);\n      elements.hours.textContent = addLeadingZero(hours);\n      elements.minutes.textContent = addLeadingZero(minutes);\n      elements.seconds.textContent = addLeadingZero(seconds);\n    }\n  }, 1000);\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, 0);\n}\n\nelements.btnStart.addEventListener('click', handlerCountdown);\n"],"names":["elements","selectedDate","options","selectedDates","iziToast","flatpickr","handlerCountdown","interval","currentTime","timeDifference","days","hours","minutes","seconds","convertMs","addLeadingZero","ms","value"],"mappings":"+IAMA,MAAMA,EAAW,CACf,MAAO,SAAS,cAAc,kBAAkB,EAChD,SAAU,SAAS,cAAc,oBAAoB,EACrD,KAAM,SAAS,cAAc,iBAAiB,EAC9C,MAAO,SAAS,cAAc,kBAAkB,EAChD,QAAS,SAAS,cAAc,oBAAoB,EACpD,QAAS,SAAS,cAAc,oBAAoB,CACtD,EAEAA,EAAS,SAAS,SAAW,GAE7B,IAAIC,EAEJ,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EAEjB,QAAQC,EAAe,CACrBF,EAAeE,EAAc,GACzBF,EAAe,IAAI,KACrBG,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,WAClB,CAAO,EAEDJ,EAAS,SAAS,SAAW,EAEhC,CACH,EAEAK,EAAUL,EAAS,MAAOE,CAAO,EAEjC,SAASI,GAAmB,CAC1BL,EAAe,IAAI,KAAKD,EAAS,MAAM,KAAK,EAAE,UAE9C,MAAMO,EAAW,YAAY,IAAM,CACjC,MAAMC,EAAc,IAAI,KAAM,EAAC,QAAO,EAChCC,EAAiBR,EAAeO,EAEtC,GAAIC,GAAkB,EACpB,cAAcF,CAAQ,MACjB,CACL,KAAM,CAAE,KAAAG,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,GAAYC,EAAUL,CAAc,EAElET,EAAS,KAAK,YAAce,EAAeL,CAAI,EAC/CV,EAAS,MAAM,YAAce,EAAeJ,CAAK,EACjDX,EAAS,QAAQ,YAAce,EAAeH,CAAO,EACrDZ,EAAS,QAAQ,YAAce,EAAeF,CAAO,CACtD,CACF,EAAE,GAAI,CACT,CAEA,SAASC,EAAUE,EAAI,CAQrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAE1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EAEpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EAEjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASE,EAAeE,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,CAAC,CACvC,CAEAjB,EAAS,SAAS,iBAAiB,QAASM,CAAgB"}